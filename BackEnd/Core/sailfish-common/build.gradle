defaultTasks 'build'

archivesBaseName = 'sailfish-common'

// Define properties
ext {
    templatesDir    = "${mainDir}/templates"
    xsdDir			= "${mainResDir}/xsd"
    genPackage      = "${genJavaDir}/com/exactpro/sf/common/impl/messages/xml/configuration"
    System.setProperty('javax.xml.accessExternalSchema', 'file')
}

configurations {
    jamon
    jaxb
}

dependencies {
    jamon 'org.jamon:jamon-anttask:2.4.2'

    jaxb 'com.sun.xml.bind:jaxb-xjc:2.2.7'
    jaxb 'com.sun.xml.bind:jaxb-jxc:2.2.7'
    jaxb 'com.sun.xml.bind:jaxb-impl:2.2.7'
    jaxb 'com.sun.xml.bind:jaxb-core:2.2.7'
    jaxb 'javax.xml.bind:jaxb-api:2.2.7'

    jaxb 'javax.xml:jsr173:1.0'
    jaxb 'javax.activation:activation:1.1.1'

    if (incremental_build) {
        compile "com.exactpro.sf:sailfish-rest-api-client:${artifactCoreVersion}"
    } else {
        compile project(':FrontEnd:Sailfish-REST-API-client')
    }

    compile 'com.exactpro.mina:apache-mina-core:2.0.9.1'

    compile 'org.codehaus.castor:castor-xml-schema:1.4.1'

    //compile 'org.jamon:jamon-api:2.3.0'
    compile 'org.jamon:jamon-runtime:2.4.1'

    compile 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.9.7'
    compile 'com.fasterxml.jackson.dataformat:jackson-dataformat-yaml:2.9.7'
    compile 'com.fasterxml.jackson.core:jackson-databind:2.9.7'

    compile 'commons-io:commons-io:2.6'
    //compile 'commons-logging:commons-logging-api:1.0.4'
    compile 'net.sourceforge.javacsv:javacsv:2.0'

    compile "org.slf4j:slf4j-api:${version_slf4j}"

    testCompile 'junit:junit:4.12'
    testCompile 'com.fasterxml.jackson.core:jackson-databind:2.9.7'
    testCompile 'com.thoughtworks.xstream:xstream:1.4.11.1'
}

task templates {
    doLast {
        ant.taskdef(name: 'jamon', classname: 'org.jamon.ant.JamonTask',   classpath: configurations.jamon.asPath)
        ant.taskdef(name: 'xjc',   classname: 'com.sun.tools.xjc.XJCTask', classpath: configurations.jaxb.asPath)
        ant.jamon(destdir: "${genJavaDir}", srcdir: "${templatesDir}")
        ant.xjc(schema: "${xsdDir}/dictionary.xsd", destdir: "${genJavaDir}", package: "com.exactpro.sf.common.impl.messages.xml.configuration") {
            produces(dir: "${genJavaDir}/com/exactpro/sf/common/impl/messages/xml/configuration", includes: "*")
            arg(value: "-extension")
        }
    }
}

task schemaGen () {
    doLast {
        println(mainJavaDir)
        ant.taskdef(name: 'schemagen', classname: 'com.sun.tools.jxc.SchemaGenTask', classpath: configurations.jaxb.asPath)
        ant.schemagen(srcdir: "${mainJavaDir}/com/exactpro/sf/common/impl/messages/all/configuration", destdir: "${xsdDir}", includeAntRuntime:'false') {
            schema(file: "generateddictionary.xsd", namespace:"")
            exclude(name: 'Attribute.java')
            exclude(name: 'Field.java')
            exclude(name: 'IAttribute.java')
            exclude(name: 'IDictionary.java')
            exclude(name: 'IField.java')
            exclude(name: 'IMessage.java')
            exclude(name: 'JavaType.java')
            exclude(name: 'Message.java')

        }

    }
}

compileKotlin.dependsOn.add("templates")
